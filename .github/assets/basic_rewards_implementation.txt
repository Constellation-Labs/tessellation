package com.my.currency.l0

import cats.effect.IO
import org.tessellation.BuildInfo
import org.tessellation.currency.dataApplication.DataCalculatedState
import org.tessellation.currency.l0.CurrencyL0App
import org.tessellation.currency.schema.currency.{CurrencyIncrementalSnapshot, CurrencySnapshotStateProof}
import org.tessellation.schema.address.Address
import org.tessellation.schema.balance.Balance
import org.tessellation.schema.cluster.ClusterId
import org.tessellation.schema.transaction.{RewardTransaction, Transaction, TransactionAmount}
import org.tessellation.node.shared.domain.rewards.Rewards
import org.tessellation.node.shared.infrastructure.consensus.trigger.ConsensusTrigger
import org.tessellation.node.shared.snapshot.currency.CurrencySnapshotEvent
import org.tessellation.security.SecurityProvider
import org.tessellation.security.signature.Signed
import eu.timepit.refined.auto._
import cats.syntax.applicative._
import org.tessellation.schema.semver.{MetagraphVersion, TessellationVersion}

import java.util.UUID
import scala.collection.immutable.{SortedMap, SortedSet}

object Main
  extends CurrencyL0App(
    "custom-rewards-l0",
    "custom-rewards L0 node",
    ClusterId(UUID.fromString("517c3a05-9219-471b-a54c-21b7d72f4ae5")),
    tessellationVersion = TessellationVersion.unsafeFrom(BuildInfo.version),
    metagraphVersion = MetagraphVersion.unsafeFrom(BuildInfo.version)
  ) {

  override def rewards(implicit sp: SecurityProvider[IO]): Some[Rewards[IO, CurrencySnapshotStateProof, CurrencyIncrementalSnapshot, CurrencySnapshotEvent]] =
    Some((_: Signed[CurrencyIncrementalSnapshot], _: SortedMap[Address, Balance], _: SortedSet[Signed[Transaction]], _: ConsensusTrigger, _: Set[CurrencySnapshotEvent], _: Option[DataCalculatedState]) => {
      val allRewards = SortedSet(
        Address("DAG8pkb7EhCkT3yU87B2yPBunSCPnEdmX2Wv24sZ"),
        Address("DAG4o41NzhfX6DyYBTTXu6sJa6awm36abJpv89jB")
      ).map(RewardTransaction(_, TransactionAmount(55_500_0000L)))

      allRewards.pure[IO]
    })
}

