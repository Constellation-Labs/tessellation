on:
  push:
    branches:
      - release/testnet

name: Testnet release

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Testnet release
    runs-on: ubuntu-20.04
    environment: testnet
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java and scala
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          JAVA_VERSION: openjdk@1.11.0
        uses: "./.github/templates/setup_java_and_scala"

      - name: Test
        run: sbt 'scalafixAll --check --rules OrganizeImports;scalafmtCheckAll;test'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the pre-release version
        id: get_version
        run: |
          sbt "writeVersion ./version"
          echo "VERSION=$(cat ./version)" >> "$GITHUB_OUTPUT"
          echo "Release-As: $(cat ./version)" >> $GITHUB_STEP_SUMMARY
          rm ./version

      - name: Assembly ðŸš€
        run: sbt 'keytool/assembly;wallet/assembly;dagL0/assembly;dagL1/assembly'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy dependencies
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          mkdir $VERSION
          cp ./modules/keytool/target/scala-2.13/tessellation-keytool-assembly-$VERSION.jar ./$VERSION/cl-keytool.jar
          cp ./modules/wallet/target/scala-2.13/tessellation-wallet-assembly-$VERSION.jar ./$VERSION/cl-wallet.jar
          cp ./modules/dag-l0/target/scala-2.13/tessellation-dag-l0-assembly-$VERSION.jar ./$VERSION/cl-node.jar
          cp ./modules/dag-l1/target/scala-2.13/tessellation-dag-l1-assembly-$VERSION.jar ./$VERSION/cl-dag-l1.jar

      - name: Create SHA-256 signature
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          RELEASE_SIGNING_KEY: ${{ secrets.RELEASE_SIGNING_KEY }}
        run: |
          umask 007
          mkdir ./ramdisk 
          sudo mount -t tmpfs -o size=1M tmpfs ./ramdisk
          export KEY_NAME="$(uuidgen)"
          touch ./ramdisk/$KEY_NAME
          chmod 600 ./ramdisk/$KEY_NAME
          echo "$RELEASE_SIGNING_KEY" >  ./ramdisk/$KEY_NAME        
          for jar in cl-keytool cl-wallet cl-node cl-dag-l1; do
            echo "$(sha256sum ./$VERSION/$jar.jar | sed 's/ .*//')" > ./$VERSION/$jar.sha256
            openssl dgst -sha256 -sign ./ramdisk/$KEY_NAME -out /dev/stdout ./$VERSION/$jar.sha256 | base64 > ./$VERSION/$jar.sig
          done

      - name: Cleanup ramdisk
        if: always()
        run: |
          sudo umount ./ramdisk
          rm -rf ./ramdisk 

      - name: Send artifacts to S3
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.S3_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.S3_REGION }}
          source: "./$VERSION"
          dest: "s3://${{ secrets.S3_BUCKET }}/testnet/tessellation/$VERSION"
          flags: --recursive --acl public-read
