on:
  push:
    branches:
      - release/integrationnet
      - release/mainnet

name: Release

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Release
    outputs:
      release_tag: ${{ steps.set_output.outputs.release_tag }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if the commit already has a tag starting with "v"
        id: check_tag
        run: |
          TAG=$(git tag --contains HEAD | grep -E '^v' || true)
          if [ -n "$TAG" ]; then
            echo "This commit has a tag starting with 'v': $TAG"
            echo "TAG_EXISTS=true" >> "$GITHUB_ENV"
          else
            echo "This commit does not have a tag starting with 'v'."
            echo "TAG_EXISTS=false" >> "$GITHUB_ENV"
          fi

      - name: Check branch and abort if necessary
        if: env.TAG_EXISTS == 'true' && github.ref_name == 'release/integrationnet'
        run: |
          echo "Aborting the action because the release should already exist."
          exit 1

      - name: Setup Java and scala
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          JAVA_VERSION: 11
        uses: "./.github/templates/actions/setup_java_and_scala"

      - name: Test
        run: sbt 'scalafixAll --check --rules OrganizeImports;scalafmtCheckAll;test'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the release version
        id: get_version
        run: |
          {
            if [[ "${{ github.ref_name }}" == "release/mainnet" ]]; then
              echo 'VERSION<<EOF'
              npx commit-and-tag-version --dry-run | grep -oP 'tagging release v\K[0-9]+\.[0-9]+\.[0-9]+'
              echo EOF
            elif [[ "${{ github.ref_name }}" == "release/integrationnet" ]]; then
              echo 'VERSION<<EOF'
              npx commit-and-tag-version --dry-run --prerelease rc | grep -oP 'tagging release v\K(.*)'
              echo EOF
            fi
          } >> "$GITHUB_OUTPUT"

      - name: Build Changelog
        id: get_changelog
        run: |
          {
            echo "CHANGELOG<<EOF"
            npx commit-and-tag-version --dry-run | sed -n '/---/,/---/p' | sed '1d;$d'
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Set Git config
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Create release tag
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          echo "Release-As: $VERSION" >> $GITHUB_STEP_SUMMARY

          git tag -a v$VERSION -m "Release $VERSION"
          git push origin v$VERSION -f
          echo "release_tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Assembly ðŸš€
        run: sbt 'keytool/assembly;wallet/assembly;dagL0/assembly;dagL1/assembly'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy dependencies
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cp ./modules/keytool/target/scala-2.13/tessellation-keytool-assembly-$VERSION.jar ./cl-keytool.jar
          cp ./modules/wallet/target/scala-2.13/tessellation-wallet-assembly-$VERSION.jar ./cl-wallet.jar
          cp ./modules/dag-l0/target/scala-2.13/tessellation-dag-l0-assembly-$VERSION.jar ./cl-node.jar
          cp ./modules/dag-l1/target/scala-2.13/tessellation-dag-l1-assembly-$VERSION.jar ./cl-dag-l1.jar

      - name: Create SHA-256 signature
        env:
          RELEASE_SIGNING_KEY: ${{ secrets.RELEASE_SIGNING_KEY }}
        run: |
          umask 007
          mkdir ./ramdisk 
          sudo mount -t tmpfs -o size=1M tmpfs ./ramdisk
          export KEY_NAME="$(uuidgen)"
          touch ./ramdisk/$KEY_NAME
          chmod 600 ./ramdisk/$KEY_NAME
          echo "$RELEASE_SIGNING_KEY" >  ./ramdisk/$KEY_NAME        
          for jar in cl-keytool cl-wallet cl-node cl-dag-l1; do
            echo "$(sha256sum ./$jar.jar | sed 's/ .*//')" > ./$jar.sha256
            openssl dgst -sha256 -sign ./ramdisk/$KEY_NAME -out /dev/stdout ./$jar.sha256 | base64 > ./$jar.sig
          done

      - name: Cleanup ramdisk
        if: always()
        run: |
          sudo umount ./ramdisk
          rm -rf ./ramdisk 

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false
          body: ${{ steps.get_changelog.outputs.CHANGELOG }}
          files: |
            ./cl-keytool.jar
            ./cl-keytool.sha256
            ./cl-keytool.sig
            ./cl-wallet.jar
            ./cl-wallet.sha256
            ./cl-node.jar
            ./cl-node.sha256
            ./cl-dag-l1.jar
            ./cl-dag-l1.sha256
            ./mainnet/mainnet-seedlist

  sonatype-publish:
    name: Publish SDK artifact to Sonatype Central
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java and scala
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          JAVA_VERSION: 11
        uses: "./.github/templates/actions/setup_java_and_scala"

      - name: Publish SDK module to Sonatype Central
        run: |
          echo "Publishing with tag: ${{ needs.build.outputs.release_tag }}"
          sbt tessellation-ci-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.MVN_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.MVN_USERNAME }}
          RELEASE_TAG: ${{ needs.build.outputs.release_tag }}
