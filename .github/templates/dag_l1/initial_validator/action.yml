name: DAG L1 Initial Validator

inputs:
  CL_PUBLIC_HTTP_PORT:
    required: true
  CL_P2P_HTTP_PORT:
    required: true
  CL_CLI_HTTP_PORT:
    required: true
  CL_GLOBAL_L0_PEER_HTTP_PORT:
    required: true

runs:
  using: "composite"
  steps:
    - name: Create directories
      shell: bash
      run: |
        cd .github/config
        mkdir -p containers/
        cd containers
        mkdir dag-l1
        mkdir -p jars

    - name: Generate DAG L1 JAR
      shell: bash
      run: |
        sbt dagL1/assembly
        
        mv modules/dag-l1/target/scala-2.13/tessellation-dag-l1-assembly-* .github/config/containers/jars/dag-l1.jar

    - name: Running DAG L1 Initial Validator
      shell: bash
      run: |
        export CL_KEYSTORE=token-key.p12
        export CL_KEYALIAS=token-key
        export CL_PASSWORD=password
        
        cd .github/config/containers/global-l0/genesis
        export GLOBAL_L0_NODE_ID=$(java -jar ../../jars/cl-wallet.jar show-id)

        cd ../../dag-l1

        mkdir initial-validator
        cd initial-validator
        
        java -jar ../../jars/cl-keytool.jar generate

        export CL_PUBLIC_HTTP_PORT=${{ inputs.CL_PUBLIC_HTTP_PORT }}
        export CL_P2P_HTTP_PORT=${{ inputs.CL_P2P_HTTP_PORT }}
        export CL_CLI_HTTP_PORT=${{ inputs.CL_CLI_HTTP_PORT }}
        export CL_APP_ENV=dev
        export CL_COLLATERAL=0
        export CL_L0_PEER_HTTP_HOST=127.0.0.1
        export CL_L0_PEER_HTTP_PORT=${{ inputs.CL_GLOBAL_L0_PEER_HTTP_PORT }}
        export CL_L0_PEER_ID=$GLOBAL_L0_NODE_ID

        echo "GLOBAL_L0_NODE_ID= $GLOBAL_L0_NODE_ID"
        echo "DAG_L1_INITIAL_VALIDATOR_NODE_ID= $(java -jar ../../jars/cl-wallet.jar show-id)"

        nohup java -jar ../../jars/dag-l1.jar run-initial-validator --ip 127.0.0.1 > dag-l1-initial-validator.log 2>&1 &

        node ../../../../action_scripts/check_if_node_started/index.js -url=http://127.0.0.1:${{ inputs.CL_PUBLIC_HTTP_PORT }}/node/info -cluster_name=DAG-L1-Initial-Validator